import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import seaborn as sns
from scipy import stats
train_df = pd.read_csv('../input/train.csv')
test_df = pd.read_csv('../input/test.csv')
def plot_train_test_norm_bar(train_se, test_se, title, figsize=(12,7)):
    fig, ax = plt.subplots(ncols=2, figsize=figsize)
    fig.suptitle(title)
    tr_va_co = train_se.fillna('missing').value_counts(normalize=True)
    te_va_co = test_se.fillna('missing').value_counts(normalize=True)
    sns.barplot(y = tr_va_co.index, x= tr_va_co.values*100, ax=ax[0])
    ax[0].set(title='Train dataset', xlabel= 'percentage', ylabel=str(train_se.name))
    sns.barplot(y = te_va_co.index, x= te_va_co.values*100, ax=ax[1])
    ax[1].set(title='Test dataset', xlabel='percentage')
    plt.plot()
print("Train dataset:")
train_df.head()
print("Data-types of each columns in train dataset:\n")
print(train_df.dtypes)
print("Test dataset:")
test_df.head()
print("Data-types of each column in Test dataset\n")
print(test_df.dtypes)
print("size of Test dataset - rows: {} & columns; {}".format(test_df.shape[0], test_df.shape[1]))
print("missing values in Test dataset column wise:\n")
print(test_df.isnull().sum(axis=0))
fig, ax = plt.subplots(figsize=(10, 7))
sns.distplot(train_df['price'], kde=True, rug=True, ax=ax, bins=500, fit=stats.norm)
ax.set(title= 'distribution of price in lakhs(INR)', xlabel='price in lakhs', ylabel='probability')
plt.show()
print("Skewness: %f" % train_df['price'].skew())
print("Kurtosis: %f" % train_df['price'].kurt())
fig, ax = plt.subplots(figsize=(10, 7))
sns.distplot(train_df[train_df['price'] < 500]['price'], kde=True, ax=ax, bins=500, fit=stats.norm)
ax.set(title= 'distribution of price < 500 lakhs(INR)', xlabel='price in lakhs', ylabel='probability')
ax.axvline(train_df['price'].mean(), color='r', linestyle='--')
ax.axvline(train_df['price'].median(), color='g', linestyle='-')
#ax.axvline(train_df['price'].mode().get_values()[0], color='y', linestyle='-')
plt.legend({'Normal distribution': stats.norm, 'Mean':train_df['price'].mean(),'Median':train_df['price'].median(), 'Mode': train_df['price'].mode().get_values()[0]})
plt.show()
fig, ax = plt.subplots(figsize=(10, 7))
p_quants = stats.probplot(train_df['price'], plot=ax)
ax.set(title="probability plot of price")
plt.show()
fig, ax = plt.subplots(figsize=(10, 7))
sns.boxplot(train_df['price'], ax=ax)
ax.set(xlabel= 'price in lakhs(INR)', title='Box plot of price')
plt.show()
train_df['price'].mode()
print('Descriptive statistics of price column:\n')
print(train_df['price'].describe())
print("{0: .2f} of records has outlier price".format(((train_df['price'] > 295).sum() / train_df.shape[0]) * 100))
plot_train_test_norm_bar(train_df['balcony'], test_df['balcony'], "Bar chart of number of balcony")
plot_train_test_norm_bar(train_df['bath'], test_df['bath'], 'Bar chart of number of bathrooms')
plot_train_test_norm_bar(train_df['area_type'], test_df['area_type'], "Bar plot of area type")
plot_train_test_norm_bar(train_df['size'], test_df['size'], "Bar chart of size", (12, 12))
train_df['availability'].value_counts()
